const input = `....#.....#.#...##..........#.......#......
.....#...####..##...#......#.........#.....
.#.#...#..........#.....#.##.......#...#..#
.#..#...........#..#..#.#.......####.....#.
##..#.................#...#..........##.##.
#..##.#...#.....##.#..#...#..#..#....#....#
##...#.............#.#..........#...#.....#
#.#..##.#.#..#.#...#.....#.#.............#.
...#..##....#........#.....................
##....###..#.#.......#...#..........#..#..#
....#.#....##...###......#......#...#......
.........#.#.....#..#........#..#..##..#...
....##...#..##...#.....##.#..#....#........
............#....######......##......#...#.
#...........##...#.#......#....#....#......
......#.....#.#....#...##.###.....#...#.#..
..#.....##..........#..........#...........
..#.#..#......#......#.....#...##.......##.
.#..#....##......#.............#...........
..##.#.....#.........#....###.........#..#.
...#....#...#.#.......#...#.#.....#........
...####........#...#....#....#........##..#
.#...........#.................#...#...#..#
#................#......#..#...........#..#
..#.#.......#...........#.#......#.........
....#............#.............#.####.#.#..
.....##....#..#...........###........#...#.
.#.....#...#.#...#..#..........#..#.#......
.#.##...#........#..#...##...#...#...#.#.#.
#.......#...#...###..#....#..#...#.........
.....#...##...#.###.#...##..........##.###.
..#.....#.##..#.....#..#.....#....#....#..#
.....#.....#..............####.#.........#.
..#..#.#..#.....#..........#..#....#....#..
#.....#.#......##.....#...#...#.......#.#..
..##.##...........#..........#.............
...#..##....#...##..##......#........#....#
.....#..........##.#.##..#....##..#........
.#...#...#......#..#.##.....#...#.....##...
...##.#....#...........####.#....#.#....#..
...#....#.#..#.........#.......#..#...##...
...##..............#......#................
........................#....##..#........#`

const map = []
input.split('\n').forEach((l, lineIndex) => {
  l.split('').forEach((point, index) => {
    if (point === '#') {
      map.push([index, lineIndex])
    }
  })
})

const center = [30, 34]
const anglesMap = new Map()
const angles = []

for (let asteroid of map) {
  if (center[0] === asteroid[0] && center[1] == asteroid[1]) continue
  const angle =
    ((Math.atan2(asteroid[1] - center[1], asteroid[0] - center[0]) * 180) / Math.PI + 450) % 360 // +450 to force top to be 0Â°
  const distance = Math.hypot(asteroid[0] - center[0], asteroid[1] - center[1])

  let item = anglesMap.get(angle)
  if (!anglesMap.has(angle)) {
    item = {
      angle,
      asteroids: [],
    }
    anglesMap.set(angle, item)
    angles.push(item)
  }
  item.asteroids.push({ point: asteroid, distance })
}

for (let item of angles.values()) {
  item.asteroids.sort((a, b) => a.distance - b.distance)
}
angles.sort((a, b) => a.angle - b.angle)

let count = 0
let index = 0
while (count < map.length - 1) {
  const angleIndex = index % angles.length
  const angle = angles[angleIndex]
  if (angle.asteroids.length > 0) {
    const asteroid = angle.asteroids.shift()
    count += 1
    console.log(count, angle.angle, asteroid)
  }
  index += 1
}
